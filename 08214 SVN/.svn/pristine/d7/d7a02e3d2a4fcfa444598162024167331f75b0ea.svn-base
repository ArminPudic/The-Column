#version 330

uniform vec4 uEyePosition;

in vec4 oNormal;
in vec4 oSurfacePosition;
in vec2 f_texcoord;

out vec4 FragColour;
out vec4 outputColor;

struct LightProperties 
{
	vec4 Position;
	vec3 AmbientLight;
	vec3 DiffuseLight;
	vec3 SpecularLight;
};

uniform LightProperties uLight;

struct MaterialProperties 
{
	vec3 AmbientReflectivity;
	vec3 DiffuseReflectivity;
	vec3 SpecularReflectivity;
	float Shininess;
};

uniform MaterialProperties uMaterial;
uniform sampler2D maintexture;

void
main()
{
 vec2 flipped_texcoord = vec2(f_texcoord.x, 1.0 - f_texcoord.y);
    //outputColor = texture(maintexture, flipped_texcoord);
	vec4 lightDir = normalize(uLight.Position - oSurfacePosition);
	float diffuseFactor = max(dot(oNormal, lightDir), 0);
	vec4 eyeDirection = normalize(uEyePosition - oSurfacePosition);
	vec4 reflectedVector = reflect(-lightDir, oNormal);
	float specularFactor = pow(max(dot( reflectedVector, eyeDirection), 0.0), 0.4f);
	outputColor = vec4(uLight.AmbientLight * uMaterial.AmbientReflectivity + uLight.DiffuseLight * uMaterial.DiffuseReflectivity * diffuseFactor + uLight.SpecularLight * uMaterial.SpecularReflectivity * specularFactor, 1);
}
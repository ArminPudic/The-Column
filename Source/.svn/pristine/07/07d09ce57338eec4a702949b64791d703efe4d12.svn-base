using System;
using Labs.Utility;
using OpenTK;
using OpenTK.Graphics;
using OpenTK.Graphics.OpenGL;

namespace Labs.Lab4
{
    public class Lab4_1Window : GameWindow
    {
        private int[] mVertexArrayObjectIDArray = new int[2];
        private int[] mVertexBufferObjectIDArray = new int[2];
        public float mCircleRadius = 0.1f;
        private ShaderUtility mShader;
        private Matrix4 mSquareMatrix;
        private Matrix4 mSquare2Matrix;
        public Vector3 mCirclePosition;
        public Vector3 mCircle2Position;
        public Vector3 mPreviousCirclePosition;
        public Vector3 mCircleVelocity;

        public Lab4_1Window()
            : base(
                800, // Width
                600, // Height
                GraphicsMode.Default,
                "Lab 4_1 Simple Animation and Collision Detection",
                GameWindowFlags.Default,
                DisplayDevice.Default,
                3, // major
                3, // minor
                GraphicsContextFlags.ForwardCompatible
                )
        {
        }

        protected override void OnLoad(EventArgs e)
        {
            GL.ClearColor(Color4.AliceBlue);
            

            mCirclePosition = new Vector3(-2, 2, 0);
            mCircle2Position = new Vector3(2, 10, 0);
            mCircleVelocity = new Vector3(2f, 0, 0);

            mShader = new ShaderUtility(@"Lab4/Shaders/vLab4.vert", @"Lab4/Shaders/fLab4.frag");
            int vPositionLocation = GL.GetAttribLocation(mShader.ShaderProgramID, "vPosition");
            GL.UseProgram(mShader.ShaderProgramID);

            float[] vertices = new float[] { 
                   -1f, -1f,
                   1f, -1f,
                   1f, 1f,
                   -1f, 1f
            };

            GL.GenVertexArrays(mVertexArrayObjectIDArray.Length, mVertexArrayObjectIDArray);
            GL.GenBuffers(mVertexBufferObjectIDArray.Length, mVertexBufferObjectIDArray);

            GL.BindVertexArray(mVertexArrayObjectIDArray[0]);
            GL.BindBuffer(BufferTarget.ArrayBuffer, mVertexBufferObjectIDArray[0]);
            GL.BufferData(BufferTarget.ArrayBuffer, (IntPtr)(vertices.Length * sizeof(float)), vertices, BufferUsageHint.StaticDraw);

            int size;
            GL.GetBufferParameter(BufferTarget.ArrayBuffer, BufferParameterName.BufferSize, out size);

            if (vertices.Length * sizeof(float) != size)
            {
                throw new ApplicationException("Vertex data not loaded onto graphics card correctly");
            }

            GL.EnableVertexAttribArray(vPositionLocation);
            GL.VertexAttribPointer(vPositionLocation, 2, VertexAttribPointerType.Float, false, 2 * sizeof(float), 0);

            vertices = new float[200];

            for (int i = 0; i < 100; ++i)
            {
                vertices[2 * i] = (float)Math.Cos(MathHelper.DegreesToRadians(i * 360.0 / 100));
                vertices[2 * i + 1] = (float)Math.Cos(MathHelper.DegreesToRadians(90.0 + i * 360.0 / 100));
            }

            GL.BindVertexArray(mVertexArrayObjectIDArray[1]);
            GL.BindBuffer(BufferTarget.ArrayBuffer, mVertexBufferObjectIDArray[1]);

            GL.BufferData(BufferTarget.ArrayBuffer, (IntPtr)(vertices.Length * sizeof(float)), vertices, BufferUsageHint.StaticDraw);

            GL.GetBufferParameter(BufferTarget.ArrayBuffer, BufferParameterName.BufferSize, out size);

            if (vertices.Length * sizeof(float) != size)
            {
                throw new ApplicationException("Vertex data not loaded onto graphics card correctly");
            }

            GL.EnableVertexAttribArray(vPositionLocation);
            GL.VertexAttribPointer(vPositionLocation, 2, VertexAttribPointerType.Float, false, 2 * sizeof(float), 0);

            int uViewLocation = GL.GetUniformLocation(mShader.ShaderProgramID, "uView");
            Matrix4 m = Matrix4.CreateTranslation(0, 0, 0);
            GL.UniformMatrix4(uViewLocation, true, ref m);

            mSquareMatrix = Matrix4.CreateScale(3f) * Matrix4.CreateRotationZ(0.5f) * Matrix4.CreateTranslation(0.0f, 0.0f, 0);
            mSquare2Matrix = Matrix4.CreateScale(1f) * Matrix4.CreateRotationZ(0.0f) * Matrix4.CreateTranslation(0.0f, 0.0f, 0);


            base.OnLoad(e);
        }

        private void SetCamera()
        {
            float height = ClientRectangle.Height;
            float width = ClientRectangle.Width;
            if (mShader != null)
            {
                Matrix4 proj;
                if (height > width)
                {
                    if (width == 0)
                    {
                        width = 1;
                    }
                    proj = Matrix4.CreateOrthographic(10, 10 * height / width, 0, 10);
                }
                else
                {
                    if (height == 0)
                    {
                        height = 1;
                    }
                    proj = Matrix4.CreateOrthographic(10 * width / height, 10, 0, 10);
                }
                int uProjectionLocation = GL.GetUniformLocation(mShader.ShaderProgramID, "uProjection");
                GL.UniformMatrix4(uProjectionLocation, true, ref proj);
            }
        }

        protected override void OnResize(EventArgs e)
        {
            base.OnResize(e);
            GL.Viewport(this.ClientRectangle);
            SetCamera();
        }

        protected override void OnRenderFrame(FrameEventArgs e)
        {
            base.OnRenderFrame(e);
            GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);

            int uModelMatrixLocation = GL.GetUniformLocation(mShader.ShaderProgramID, "uModel");
            int uColourLocation = GL.GetUniformLocation(mShader.ShaderProgramID, "uColour");

            #region World Space
            GL.Uniform4(uColourLocation, Color4.DodgerBlue);

            GL.UniformMatrix4(uModelMatrixLocation, true, ref mSquareMatrix);
            GL.BindVertexArray(mVertexArrayObjectIDArray[0]);
            GL.DrawArrays(PrimitiveType.LineLoop, 0, 4);

            GL.UniformMatrix4(uModelMatrixLocation, true, ref mSquare2Matrix);
            GL.BindVertexArray(mVertexArrayObjectIDArray[0]);
            GL.DrawArrays(PrimitiveType.LineLoop, 0, 4);

            Matrix4 circleMatrix = Matrix4.CreateScale(mCircleRadius) * Matrix4.CreateTranslation(mCirclePosition);

            GL.UniformMatrix4(uModelMatrixLocation, true, ref circleMatrix);
            GL.BindVertexArray(mVertexArrayObjectIDArray[1]);
            GL.DrawArrays(PrimitiveType.LineLoop, 0, 100);

            Matrix4 circleMatrix2 = Matrix4.CreateScale(mCircleRadius) * Matrix4.CreateTranslation(mCircle2Position);

            GL.UniformMatrix4(uModelMatrixLocation, true, ref circleMatrix2);
            GL.BindVertexArray(mVertexArrayObjectIDArray[1]);
            GL.DrawArrays(PrimitiveType.LineLoop, 0, 100);
            #endregion

            #region Square Space
            GL.Uniform4(uColourLocation, Color4.Red);
            Matrix4 m = mSquareMatrix * mSquareMatrix.Inverted();
            GL.UniformMatrix4(uModelMatrixLocation, true, ref m);
            GL.BindVertexArray(mVertexArrayObjectIDArray[0]);
            GL.DrawArrays(PrimitiveType.LineLoop, 0, 4);
            m = mSquare2Matrix * mSquareMatrix.Inverted();
            GL.UniformMatrix4(uModelMatrixLocation, true, ref m);
            GL.BindVertexArray(mVertexArrayObjectIDArray[0]);
            GL.DrawArrays(PrimitiveType.LineLoop, 0, 4);
            m = (Matrix4.CreateScale(mCircleRadius) * Matrix4.CreateTranslation(mCirclePosition)) *
            mSquareMatrix.Inverted();
            GL.UniformMatrix4(uModelMatrixLocation, true, ref m);
            GL.BindVertexArray(mVertexArrayObjectIDArray[1]);
            GL.DrawArrays(PrimitiveType.LineLoop, 0, 100);
            m = (Matrix4.CreateScale(mCircleRadius) * Matrix4.CreateTranslation(mCircle2Position)) *
            mSquareMatrix.Inverted();
            GL.UniformMatrix4(uModelMatrixLocation, true, ref m);
            GL.BindVertexArray(mVertexArrayObjectIDArray[1]);
            GL.DrawArrays(PrimitiveType.LineLoop, 0, 100);
            #endregion

            this.SwapBuffers();
        }

        public Vector3 squareCollisionCalculation (Vector3 L1P, Vector3 L2P)
        {
            Vector3 noCollision = new Vector3(100, 100, 0);
            Vector3 L3P = L1P - L2P;
            Vector3 C2P = mCirclePosition - L2P;
            Vector3 A = Vector3.Dot(C2P, L3P.Normalized()) * L3P.Normalized();
            if (A.Length == 0)
                return noCollision;
            if (A.Length > L3P.Length)
                return noCollision;
            Vector3 squareCollision = L2P + A - mCirclePosition;
            return squareCollision;
        }

        protected override void OnUpdateFrame(FrameEventArgs e)
        {
            base.OnUpdateFrame(e);
            mPreviousCirclePosition = mCirclePosition;
            mCirclePosition = mCirclePosition + mCircleVelocity;
            Vector3 circleInSquareSpace = Vector3.Transform(mCirclePosition, mSquareMatrix.Inverted());
            Vector3 collisionVector = mCircle2Position - mCirclePosition;

            #region Square collsions
            Vector3 L1P = new Vector3(-1, 1, 0);
            Vector3 L2P = new Vector3(-1, -1, 0);
            Vector3 L3P = new Vector3(1, 1, 0);
            Vector3 L4P = new Vector3(1, -1, 0);
            Vector3 squareCollisionLeft = squareCollisionCalculation(L1P, L2P);
            Vector3 squareCollisionRight = squareCollisionCalculation(L3P, L4P);
            Vector3 squareCollisionUp = squareCollisionCalculation(L3P, L1P);
            Vector3 squareCollisionDown = squareCollisionCalculation(L4P, L2P);
            Vector3 cornerVector1 = L1P;
            Vector3 cornerVector2 = L2P;
            Vector3 cornerVector3 = L3P;
            Vector3 cornerVector4 = L4P;
            Vector3 cornerCollisionVector1 = cornerVector1 - mCirclePosition;
            Vector3 cornerCollisionVector2 = cornerVector2 - mCirclePosition;
            Vector3 cornerCollisionVector3 = cornerVector3 - mCirclePosition;
            Vector3 cornerCollisionVector4 = cornerVector4 - mCirclePosition;

            if (squareCollisionLeft.Length <= mCircleRadius)
            {
                mCirclePosition = mPreviousCirclePosition;
                Vector3 normal = (squareCollisionLeft).Normalized();
                mCircleVelocity = mCircleVelocity - 2 * Vector3.Dot(normal, mCircleVelocity) * normal;
            }
            if (squareCollisionRight.Length <= mCircleRadius)
            {
                mCirclePosition = mPreviousCirclePosition;
                Vector3 normal = (squareCollisionRight).Normalized();
                mCircleVelocity = mCircleVelocity - 2 * Vector3.Dot(normal, mCircleVelocity) * normal;
            }
            if (squareCollisionUp.Length <= mCircleRadius)
            {
                mCirclePosition = mPreviousCirclePosition;
                Vector3 normal = (squareCollisionUp).Normalized();
                mCircleVelocity = mCircleVelocity - 2 * Vector3.Dot(normal, mCircleVelocity) * normal;
            }
            if (squareCollisionDown.Length <= mCircleRadius)
            {
                mCirclePosition = mPreviousCirclePosition;
                Vector3 normal = (squareCollisionDown).Normalized();
                mCircleVelocity = mCircleVelocity - 2 * Vector3.Dot(normal, mCircleVelocity) * normal;
            }
            if (cornerCollisionVector1.Length <= mCircleRadius)
            {
                mCirclePosition = mPreviousCirclePosition;
                Vector3 normal = (cornerCollisionVector1).Normalized();
                mCircleVelocity = mCircleVelocity - 2 * Vector3.Dot(normal, mCircleVelocity) * normal;
            }
            if (cornerCollisionVector2.Length <= mCircleRadius)
            {
                mCirclePosition = mPreviousCirclePosition;
                Vector3 normal = (cornerCollisionVector2).Normalized();
                mCircleVelocity = mCircleVelocity - 2 * Vector3.Dot(normal, mCircleVelocity) * normal;
            }
            if (cornerCollisionVector3.Length <= mCircleRadius)
            {
                mCirclePosition = mPreviousCirclePosition;
                Vector3 normal = (cornerCollisionVector3).Normalized();
                mCircleVelocity = mCircleVelocity - 2 * Vector3.Dot(normal, mCircleVelocity) * normal;
            }
            if (cornerCollisionVector4.Length <= mCircleRadius)
            {
                mCirclePosition = mPreviousCirclePosition;
                Vector3 normal = (cornerCollisionVector4).Normalized();
                mCircleVelocity = mCircleVelocity - 2 * Vector3.Dot(normal, mCircleVelocity) * normal;
            }
            #endregion

            if (collisionVector.Length <= mCircleRadius * 2)
            {
                mCirclePosition = mPreviousCirclePosition;
                Vector3 normal = (collisionVector).Normalized();
                mCircleVelocity = mCircleVelocity - 2 * Vector3.Dot(normal, mCircleVelocity) * normal;

            }
            if (circleInSquareSpace.X + (mCircleRadius / mSquareMatrix.ExtractScale().X) > 1)
            {
                mCirclePosition = mPreviousCirclePosition;
                Vector3 normal = Vector3.Transform(new Vector3(1, 0, 0), mSquareMatrix.ExtractRotation());
                mCircleVelocity = mCircleVelocity - 2 * Vector3.Dot(normal, mCircleVelocity) * normal;
            }
            if (circleInSquareSpace.X - (mCircleRadius / mSquareMatrix.ExtractScale().X) < -1)
            {
                mCirclePosition = mPreviousCirclePosition;
                Vector3 normal = Vector3.Transform(new Vector3(-1, 0, 0), mSquareMatrix.ExtractRotation());
                mCircleVelocity = mCircleVelocity - 2 * Vector3.Dot(normal, mCircleVelocity) * normal;
            }
            if (circleInSquareSpace.Y + (mCircleRadius / mSquareMatrix.ExtractScale().Y) > 1)
            {
                mCirclePosition = mPreviousCirclePosition;
                Vector3 normal = Vector3.Transform(new Vector3(0, 1, 0), mSquareMatrix.ExtractRotation());
                mCircleVelocity = mCircleVelocity - 2 * Vector3.Dot(normal, mCircleVelocity) * normal;
            }
            if (circleInSquareSpace.Y - (mCircleRadius / mSquareMatrix.ExtractScale().Y) < -1)
            {
                mCirclePosition = mPreviousCirclePosition;
                Vector3 normal = Vector3.Transform(new Vector3(0, -1, 0), mSquareMatrix.ExtractRotation());
                mCircleVelocity = mCircleVelocity - 2 * Vector3.Dot(normal, mCircleVelocity) * normal;
            }
        }

        protected override void OnUnload(EventArgs e)
        {
            base.OnUnload(e);
            GL.DeleteBuffers(mVertexBufferObjectIDArray.Length, mVertexBufferObjectIDArray);
            GL.DeleteVertexArrays(mVertexArrayObjectIDArray.Length, mVertexArrayObjectIDArray);
            GL.UseProgram(0);
            mShader.Delete();
        }
    }
}